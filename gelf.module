<?php
/**
 * @file
 *   Module enable a Drupal project to log to a graylog2 server.
 */

/**
 * Implements hook_permission()
 *
 * Allows admins to control access to gelf settings.
 */
function gelf_permission() {
  return array(
    'administer gelf' => array(
      'title' => t('administer gelf'),
      'description' => t('Manage graylog2 host settings'),
    ),
  );
}

/**
 * Send the data to be logged to a central graylog2 server.
 * Implement hook_watchdog().
 *
 * @param array $entry
 */
function gelf_watchdog(array $entry) {
  if (!gelf_require()) {
    _gelf_show_message(
      'GELF module requires the GELF PHP library to be installed.  View the README for installation instructions.'
    );
    return;
  }

  if (!_gelf_verify_entry($entry)) {
    if(function_exists('user_access') && user_access('administer gelf')) {
      _gelf_show_message(
        'GELF module requires the data array to be logged satisfying a special structure which the current entry does not respect.'
      );
    }
    return;
  }

  if($entry['severity'] > variable_get('gelf_severity', WATCHDOG_WARNING)) {
    return;
  }

  $host = variable_get('gelf_host', 'localhost');
  $port = variable_get('gelf_port', 12201);
  $send_as = variable_get('gelf_send_as', 'HOST');

  try {
    $publisher = new GELFMessagePublisher($host, $port);
    $publisher->publish(_gelf_generate_message($entry, $send_as));
  }
  catch (Exception $e) {
    _gelf_show_message(
      'Failed to publish gelf message: %message', array('%message' => $e->getMessage())
    );
  }
}

/**
 * Verifies that the given array applies to the structure an entry has to have.
 *
 * @param array $entry
 *
 * @return bool
 */
function _gelf_verify_entry(array $entry)
{
  $mandatory = array('severity', 'type', 'referer', 'link', 'user', 'request_uri', 'ip', 'message');

  foreach ($mandatory as $key) {
    if (empty($entry[ $key])) {
      return false;
    }
  }

  if (!is_object($$entry['user'])) {
    return false;
  }

  return true;
}

/**
 * Generates a message suitable to be logged on a graylog2 server.
 *
 * @param array  $entry
 * @param string $send_as
 *
 * @return GELFMessage
 */
function _gelf_generate_message(array $entry, $send_as)
{
  $source_host = _gelf_determine_source_host($send_as);
  $message = filter_xss(is_null($entry['variables']) ? $entry['message'] : strtr($entry['message'], $entry['variables']));
  $short_msg_length = 100;

  if(strlen($message) > $short_msg_length) {
      $short_message = preg_replace('/\s+?(\S+)?$/u', '', substr($message, 0, $short_msg_length));
  }
  else {
      $short_message = $message;
  }

  $username = !empty($entry['user']->name) ? $entry['user']->name : variable_get('anonymous', t('Anonymous'));

  $gelf = new GELFMessage();
  $gelf->setShortMessage($short_message);
  $gelf->setFullMessage($message);
  $gelf->setHost($source_host);
  $gelf->setFacility($entry['type']);
  $gelf->setLevel($entry['severity']);
  $gelf->setTimestamp($entry['timestamp']);
  $gelf->setAdditional("Referer", $entry['referer']);
  $gelf->setAdditional("Link", $entry['link']);
  $gelf->setAdditional("Username", $username);
  $gelf->setAdditional("Uid", $entry['user']->uid);
  $gelf->setAdditional("Request_uri", $entry['request_uri']);
  $gelf->setAdditional("Server_host", $_SERVER['HTTP_HOST']);
  $gelf->setAdditional("Client_host", $entry['ip']);

  return $gelf;
}

/**
 * @param $send_as
 *
 * @return mixed|string
 */
function _gelf_determine_source_host($send_as)
{
  if($send_as == 'HTTP_HOST') {
    // The HTTP_HOST can be set to default in the case of a CLI script
    if($_SERVER['HTTP_HOST'] == 'default') {
      global $base_url;
      $source_host = parse_url($base_url, PHP_URL_HOST);

      // base_url is not set, fallback to hostname
      if($source_host == 'default') {
        $source_host = php_uname('n');
      }
    }
    else {
        $source_host = $_SERVER['HTTP_HOST'];
    }
  }
  else {
    $source_host = php_uname('n');
  }

  return $source_host;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gelf_form_system_logging_settings_alter(&$form, $form_state) {

  $form['gelf_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Graylog2 host'),
    '#default_value' => variable_get('gelf_host', 'localhost'),
  );
  $form['gelf_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Graylog2 GELF port'),
    '#default_value' => variable_get('gelf_port', 12201),
  );
  $form['gelf_severity'] = array(
    '#type' => 'select',
    '#options' => array(
      WATCHDOG_EMERGENCY => t('Emergency'),
      WATCHDOG_ALERT => t('Alert'),
      WATCHDOG_CRITICAL => t('Critical'),
      WATCHDOG_ERROR => t('Error'),
      WATCHDOG_WARNING => t('Warning'),
      WATCHDOG_NOTICE => t('Notice'),
      WATCHDOG_INFO => t('Info'),
      WATCHDOG_DEBUG => t('Debug'),
    ),
    '#title' => t('Graylog2 minimum severity level'),
    '#default_value' => variable_get('gelf_severity', WATCHDOG_WARNING),
  );
  $form['gelf_send_as'] = array(
    '#type' => 'select',
    '#title' => t('Host name for Graylog2'),
    '#options' => array('HOST' => 'Server hostname', 'HTTP_HOST' => 'Web hostname'),
    '#default_value' => variable_get('gelf_send_as', 'HOST'),
  );

  if (!gelf_require()) {
    drupal_set_message(t('GELF module requires the GELF PHP library to be installed.  View the README for installation instructions.'), 'error');
  }

  return $form;
}

/**
 * Include gelf-php library.
 *
 * @return boolean
 */
function gelf_require() {
  // Check if the classes already exist and allow existing autoloaders.
  if (class_exists('GELFMessage') && class_exists('GELFMessagePublisher')) {
    return TRUE;
  }

  // Check module for Composer autoload file.
  if (@include_once(__DIR__ . '/vendor/autoload.php')) {
    return TRUE;
  }

  // Use Libraries API to load it.
  if (module_exists('libraries')) {
    $gelfmsg_path = libraries_get_path('gelf-php') . '/GELFMessage.php';
    $gelfpub_path = libraries_get_path('gelf-php') . '/GELFMessagePublisher.php';

    // Check if the php-gelf library is available
    if (file_exists(DRUPAL_ROOT . '/' . $gelfmsg_path) && file_exists(DRUPAL_ROOT . '/' . $gelfpub_path)) {
      require_once DRUPAL_ROOT . '/' . $gelfmsg_path;
      require_once DRUPAL_ROOT . '/' . $gelfpub_path;
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Displays the provides test on the website if the current user has the requitred permissions.
 *
 * @param $text
 */
function _gelf_show_message($text)
{
  if(function_exists('user_access') && user_access('administer gelf')) {
    drupal_set_message(t($text), 'error');
  }
}
